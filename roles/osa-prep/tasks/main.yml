---

- name: Update apt sources
  apt:
    update_cache: yes
    cache_valid_time: 3600
  register: apt_update
  until: apt_update|success
  retries: 5
  delay: 2
  when: ansible_os_family == "Debian"
  tags: 
    - packages
    - ubuntu

- name: Install  Packages
  apt: name={{ item }} state=present
  with_items:
    - vlan
    - bridge-utils
    - git
    - python-dev
    - python-yaml
  when: ansible_os_family == "Debian"
  tags:
    - packages
    - ubuntu

- name: Upgrade CentOS
  yum:
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"
  tags:
    - upgrade
    - upgrade_centos
    - centos

- name: Upgrade Ubuntu
  apt: upgrade=dist
  when: ansible_os_family == "Debian"
  tags:
    - upgrade
    - upgrade_ubuntu
    - ubuntu


# - name: Debug Vars
#   debug: 
#     # var: inventory_hostname
#     var: "{{inventory_hostname}}_br_mgmt_ip"
#     # var: "{{ controller01_br_mgmt_ip }}"
#     # var: "{{ ansible_hostname_br_mgmt_ip }}"
#     verbosity: 1
#   tags:
#     - debug

# - name: Set Facts
#   set_fact: 
#     br_mgmt_ip: "{{inventory_hostname}}_br_mgmt_ip"
#     cacheable: true
#   tags:
#     - debug
#     - networking

# - name: Debug Vars
#   debug: 
#     msg: "{{ br_mgmt_ip }}"
#     verbosity: 1
#   tags:
#     - debug

- name: Configure Bridges
  template:
    src: files/interfaces
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("co"))
  register: bridges
  tags:
    - networking
    - ubuntu

- name: Debug Networking
  debug: 
    var: bridges.changed
    verbosity: 2
  when: inventory_hostname | search("co")
  tags:
    - networking

- name: Restart Networking
  shell: "ip addr flush enp0s8 && ip addr flush enp0s9 && ip addr flush enp0s10 && ip addr flush enp0s16 && systemctl restart networking.service"
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("co")) and (bridges.changed == true)
  tags:
    - networking
    - ubuntu

# - name: Debug IPs
#   debug: 
#     # var: ansible_all_ipv4_addresses
#     var: ansible_enp0s9.ipv4.address
#     # var: ansible_enp0s9.ipv4.netmask
#     # verbosity: 2
#   tags:
#     - debug

## generates the reboot-required.pkgs
## used just for testing reboot code which follows
## comment out once working
# - name: Generate reboot file
#   copy:
#     src: files/reboot-required.pkgs
#     dest: /var/run/reboot-required.pkgs

- name: Is Reboot Required
  stat: 
    path: /var/run/reboot-required.pkgs
  register: stat_result
  tags:
    - upgrade
    - common
    - test

- name: Test stat results
  debug:
    var: stat_result
    verbosity: 3
  tags:
    - upgrade
    - common
    - test

- name: Reboot Controller?
  debug:
    msg: "Controller Reboot required"
  when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True) 
  notify: vagrant-shutdown
  tags:
    - upgrade
    - common
    - test

- name: Reboot Compute?
  debug:
    msg: "Compute Reboot required"
  when: (inventory_hostname | search("compute")) and (stat_result.stat.exists == True) 
  notify: restart
  tags:
    - upgrade
    - common
    - test

- name: Reboot LBs?
  debug:
    msg: "LB Reboot required"
  when: (inventory_hostname | search("lb")) and (stat_result.stat.exists == True) 
  notify: restart
  tags:
    - upgrade
    - common
    - test

# - name: Reboot Block?
#   debug:
#     msg: "Block Reboot required"
#   when: (inventory_hostname | search("block")) and (stat_result.stat.exists == True) 
#   notify: restart
#   tags:
#     - upgrade
#     - common

# - name: Reboot Object?
#   debug:
#     msg: "Object Reboot required"
#   when: (inventory_hostname | search("object")) and (stat_result.stat.exists == True) 
#   notify: restart
#   tags:
#     - upgrade
#     - common

### If you need to maintain the vagrant shared folder mount, you must use vagrant to stopp and start host as 
### a reboot will not re-mount the shared folders
# - name: vagrant-shutdown controller
#   become: false
#   local_action: command vagrant halt {{ ansible_hostname }}
#   when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True) 
#   tags:
#     - upgrade
#     - common

# - name: vagrant boot controller
#   become: false
#   local_action: command vagrant up {{ ansible_hostname }}
#   when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True) 
#   tags:
#     - upgrade
#     - common

- name: Restart Controllers
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True)
  tags:
    - upgrade
    - common

- name: Restart Compute
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("compute")) and (stat_result.stat.exists == True)
  tags:
    - upgrade
    - common

- name: Restart LBs
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("lb")) and (stat_result.stat.exists == True)
  tags:
    - upgrade
    - common
    - test

- name: Wait for Controller Nodes to reboot
  local_action: wait_for host={{ ansible_hostname }} state=started delay=20 timeout=30
  become: false
  when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True)
  tags:
    - upgrade
    - common

- name: Wait for Compute Nodes to reboot
  local_action: wait_for host={{ ansible_hostname }} state=started delay=20 timeout=30
  become: false
  when: (inventory_hostname | search("compute")) and (stat_result.stat.exists == True)
  tags:
    - upgrade
    - common

- name: Wait for LB Nodes to reboot
  local_action: wait_for host={{ ansible_hostname }} state=started delay=20 timeout=30
  become: false
  when: (inventory_hostname | search("lb")) and (stat_result.stat.exists == True)
  tags:
    - upgrade
    - common

# - name: Restart Block
#   shell: sleep 2 && shutdown -r now "Ansible triggered restart"
#   async: 1
#   poll: 0
#   become: true
#   ignore_errors: true
#   when: (inventory_hostname | search("block")) and (stat_result.stat.exists == True)
#   tags:
#     - upgrade
#     - common

# - name: Wait for Block Nodes to reboot
#   local_action: wait_for host={{ ansible_hostname }} state=started delay=20 timeout=30
#   become: false
#   when: (inventory_hostname | search("block")) and (stat_result.stat.exists == True)
#   tags:
#     - upgrade
#     - common

# - name: Restart Object
#   shell: sleep 2 && shutdown -r now "Ansible triggered restart"
#   async: 1
#   poll: 0
#   become: true
#   ignore_errors: true
#   when: (inventory_hostname | search("object")) and (stat_result.stat.exists == True)
#   tags:
#     - upgrade
#     - common

# - name: Wait for Object Nodes to reboot
#   local_action: wait_for host={{ ansible_hostname }} state=started delay=20 timeout=30
#   become: false
#   when: (inventory_hostname | search("object")) and (stat_result.stat.exists == True)
#   tags:
#     - upgrade
#     - common

# - name: Install python-openstackclient
#   package:
#     name: python-openstackclient
#     state: present
#   tags:
#     - packages
#     - common

- name: Install openstack-selinux
  package:
    name: openstack-selinux
    state: present
  when: ansible_os_family == "RedHat"
  tags:
    - redhat